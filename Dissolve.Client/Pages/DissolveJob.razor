@page "/dissolveJob"
@using Dissolve.Client.Services
@using Dissolve.Shared.Entities
@using System.Text.Encodings.Web
@inject Dissolve.Client.Services.IDissolveJobService DissolveJobService

<h1>Total time: @TotalTime</h1>

<div class="input-group">
    <div class="input-group-prepend">
        <span class="input-group-text" id="">Amount of images</span>
    </div>
    <input @bind="@ImageCount" type="text" class="form-control">
    <div class="input-group-append">
        <button @onclick="AddWorker" type="button" class="btn btn-outline-primary">Add</button>
        <button @onclick="RemoveWorker" type="button" class="btn btn-outline-primary">Remove</button>
    </div>
</div>

<table class="table">
    <thead class="thead-dark">
    <tr>
        <th scope="col">#</th>
        <th scope="col">Processing time</th>
        <th scope="col">Work Time</th>
        <th scope="col">Image Edited</th>
    </tr>
    </thead>
    <tbody>
    @for (var i = 0; i < WorkersSpeed.Count; i++)
    {
        var local = i;
        <tr>
            <th scope="row">@(i + 1)</th>
            <td>
                <input @bind="@WorkersSpeed[local]" type="number">
            </td>
            <td>@WorkTime[local]</td>
            <td>@ImageEdit[local]</td>
        </tr>
    }
    </tbody>
</table>

<button @onclick="Calculate" type="button" class="btn btn-primary btn-lg btn-block">Calculate</button>




@code {

    private int ImageCount { get; set; } = 1000;
    private List<int> WorkersSpeed { get; set; } = new List<int>() {2, 3, 4};
    private List<double> WorkTime { get; set; } = new List<double>() {0, 0, 0};
    private List<int> ImageEdit { get; set; } = new List<int>() {0, 0, 0};
    private double TotalTime { get; set; } = 0;

    private void AddWorker()
    {
        WorkersSpeed.Add(1);
        WorkTime.Add(0);
        ImageEdit.Add(0);
    }

    private async void Calculate()
    {
        var workers = WorkersSpeed.Select((speed, id) => new ImageEditWorker(id, speed)).ToList();
        var works = await DissolveJobService.DissolveJob(ImageCount, workers);
        
        TotalTime = await DissolveJobService.TotalTimeJob(ImageCount, workers);
        for (var i = 0; i < workers.Count; i++)
        {
            ImageEdit[i] = works[workers[i]];
            WorkTime[i] = ImageEdit[i] * workers[i].TimeProcessing;
        }
        
        StateHasChanged();
    }

    private void RemoveWorker()
    {
        if (WorkersSpeed.Count == 0) return;
        WorkersSpeed.RemoveAt(WorkersSpeed.Count - 1);
        WorkTime.RemoveAt(WorkTime.Count - 1);
        ImageEdit.RemoveAt(ImageEdit.Count - 1);
    }

}